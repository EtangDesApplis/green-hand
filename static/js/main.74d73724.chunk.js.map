{"version":3,"sources":["Table.js","Formulaire.js","User.js","Popup.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","variety","JSON","stringify","seedingOutdoor","month","label","seedingIndoor","harvest","exposition","timeToHarvest","onClick","removeCharacter","Table","value","Formulaire","initialState","state","handleMonthChange","opt","meta","name","options","setState","i","l","length","push","selectedOptions","handleChange","event","target","addForm","handleSubmit","console","log","this","Form","Group","Label","Control","type","id","onChange","placeholder","Text","className","isMulti","as","Component","User","submitForm","sendInfo","email","username","Popup","text","closePopup","React","App","characters","showPopup","filter","character","seedsValue","back","info","seeds","togglePopup","bind","ReactDOM","render","document","getElementById"],"mappings":"0OAGMA,EAAc,WAChB,OACI,gCACI,+BACI,yCACA,iDACA,gDACA,yCACA,4CACA,iDACA,8CAiBVC,EAAY,SAACC,GACf,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GAEvC,OACI,+BACI,6BAAKD,EAAIE,UACT,6BAAKC,KAAKC,UAAUJ,EAAIK,eAAeN,KAAI,SAACO,GAAD,OAAYA,EAAMC,YAC7D,6BAAKJ,KAAKC,UAAUJ,EAAIQ,cAAcT,KAAI,SAACO,GAAD,OAAYA,EAAMC,YAC5D,6BAAKJ,KAAKC,UAAUJ,EAAIS,QAAQV,KAAI,SAACO,GAAD,OAAYA,EAAMC,YACtD,6BAAKP,EAAIU,aACT,6BAAKV,EAAIW,gBACT,6BACI,wBAAQC,QAAS,kBAAMhB,EAAMiB,gBAAgBZ,IAA7C,wBARCA,MAajB,OAAO,gCAAQJ,KAMJiB,EAlCD,SAAClB,GAAW,IACdE,EAAmCF,EAAnCE,cAAee,EAAoBjB,EAApBiB,gBAEvB,OACI,kCACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWf,cAAeA,EAAee,gBAAiBA,Q,uBCrBhEP,EAAQ,CACV,CAAEC,MAAO,UAAWQ,MAAO,KAC3B,CAAER,MAAO,WAAYQ,MAAO,KAC5B,CAAER,MAAO,QAASQ,MAAO,KACzB,CAAER,MAAO,QAASQ,MAAO,KACzB,CAAER,MAAO,MAAOQ,MAAO,KACvB,CAAER,MAAO,OAAQQ,MAAO,KACxB,CAAER,MAAO,OAAQQ,MAAO,KACxB,CAAER,MAAO,SAAUQ,MAAO,KAC1B,CAAER,MAAO,YAAaQ,MAAO,KAC7B,CAAER,MAAO,UAAWQ,MAAO,MAC3B,CAAER,MAAO,WAAYQ,MAAO,MAC5B,CAAER,MAAO,WAAYQ,MAAO,OA4HjBC,E,4MAvHXC,aAAe,CACXf,QAAS,GACTG,eAAgB,GAChBG,cAAe,GACfC,QAAS,GACTC,WAAY,GACZC,cAAe,I,EAGnBO,MAAQ,EAAKD,a,EAEbE,kBAAoB,SAACC,EAAKC,GAEtB,IAAOC,EAAQD,EAAKC,KAChBC,EAAUH,EACVL,EAAQ,GACZ,GAAe,MAAXQ,EACA,EAAKC,SAAL,eACKF,EAAO,UAIX,IAAK,IAAIG,EAAI,EAAGC,EAAIH,EAAQI,OAAQF,EAAIC,EAAGD,IACxCV,EAAMa,KAAKL,EAAQE,GAAGV,OAG9B,EAAKS,SAAL,eACKF,EAAOP,K,EAKhBI,kBAAoB,SAACU,EAAgBR,GACjC,IAAMC,EAAOD,EAAKC,KAClB,EAAKE,SAAL,eACKF,EAAOO,K,EAKZC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAArBV,EADe,EACfA,KAAMP,EADS,EACTA,MACb,EAAKS,SAAL,eACKF,EAAOP,K,EAIpBkB,QAAU,WACN,EAAKrC,MAAMsC,aAAa,EAAKhB,OAC7B,EAAKM,SAAS,EAAKP,cACnBkB,QAAQC,IAAI,EAAKlB,MAAMV,gB,uDAGjB,IAAD,EACgF6B,KAAKnB,MAAnFhB,EADF,EACEA,QAASG,EADX,EACWA,eAAgBG,EAD3B,EAC2BA,cAAeC,EAD1C,EAC0CA,QAASC,EADnD,EACmDA,WAAYC,EAD/D,EAC+DA,cAEpE,OACK,mCACG,eAAC2B,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,sBACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,OACfpB,KAAK,UACLqB,GAAG,UACH5B,MAAOb,EACP0C,SAAUP,KAAKP,aAAce,YAAY,wBAC7C,cAACP,EAAA,EAAKQ,KAAN,CAAWC,UAAU,aAArB,0CAEJ,cAACT,EAAA,EAAKE,MAAN,gCACA,cAAC,IAAD,CACIlB,KAAK,iBACLqB,GAAG,iBACHpB,QAASjB,EACTS,MAAOV,EACP2C,SAAO,EACPJ,SAAUP,KAAKlB,oBAEnB,cAACmB,EAAA,EAAKE,MAAN,+BACA,cAAC,IAAD,CACIlB,KAAK,gBACLqB,GAAG,gBACHpB,QAASjB,EACTS,MAAOP,EACPwC,SAAO,EACPJ,SAAUP,KAAKlB,oBAEnB,cAACmB,EAAA,EAAKE,MAAN,wBACA,cAAC,IAAD,CACIlB,KAAK,UACLqB,GAAG,UACHpB,QAASjB,EACTS,MAAON,EACPuC,SAAO,EACPJ,SAAUP,KAAKlB,oBAEnB,eAACmB,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,yBACA,eAACF,EAAA,EAAKG,QAAN,CAAcQ,GAAG,SAAS3B,KAAK,aAAaqB,GAAG,aAAa5B,MAAOL,EAAYkC,SAAUP,KAAKP,aAA9F,UACI,wBAAQf,MAAM,QAAd,mBACA,wBAAQA,MAAM,cAAd,yBACA,wBAAQA,MAAM,SAAd,uBAEJ,cAACuB,EAAA,EAAKQ,KAAN,CAAWC,UAAU,aAArB,8DAEJ,eAACT,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,8BACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,OACfpB,KAAK,gBACLqB,GAAG,gBACH5B,MAAOJ,EACPiC,SAAUP,KAAKP,aAAce,YAAY,8BAC7C,cAACP,EAAA,EAAKQ,KAAN,CAAWC,UAAU,aAArB,0FAEJ,uBAAOL,KAAK,SAAS3B,MAAM,MAAMH,QAASyB,KAAKJ,mB,GAnH1CiB,aC8CVC,E,4MA1DPrB,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAArBV,EADe,EACfA,KAAMP,EADS,EACTA,MAEb,EAAKS,SAAL,eACKF,EAAOP,K,EAiBpBqC,WAAa,WAET,EAAKxD,MAAMyD,SAAS,EAAKnC,Q,uDAGnB,IACEoC,EAAoB,GAApBA,MAAQC,EAAY,GAAZA,SAEhB,OACK,mCACG,eAACjB,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,oBACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,OACfpB,KAAK,QACLqB,GAAG,QACH5B,MAAOuC,EACPV,SAAUP,KAAKP,aAAce,YAAY,gBAC7C,cAACP,EAAA,EAAKQ,KAAN,CAAWC,UAAU,aAArB,kCAEJ,eAACT,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,uBACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,OACfpB,KAAK,WACLqB,GAAG,WACH5B,MAAOwC,EACPX,SAAUP,KAAKP,aAAce,YAAY,mBAC7C,cAACP,EAAA,EAAKQ,KAAN,CAAWC,UAAU,aAArB,qCAEJ,uBAAOL,KAAK,SAAS3B,MAAM,SAASH,QAASyB,KAAKe,sB,GApDnDF,aCYJM,E,uKAZP,OACI,qBAAKT,UAAU,QAAf,SACI,sBAAKA,UAAU,gBAAf,UAEI,qBAAKJ,GAAG,OAAR,SAAgBxC,KAAKC,UAAUiC,KAAKzC,MAAM6D,QAC1C,wBAAQ7C,QAASyB,KAAKzC,MAAM8D,WAA5B,+B,GAPAC,IAAMT,WC+EXU,E,4MAxEX1C,MAAQ,CACJ2C,WAAY,GACZC,WAAW,G,EAEfjD,gBAAkB,SAACZ,GAAW,IAClB4D,EAAe,EAAK3C,MAApB2C,WAER,EAAKrC,SAAS,CACVqC,WAAYA,EAAWE,QAAO,SAACC,EAAWvC,GACtC,OAAOA,IAAMxB,Q,EAWzBiC,aAAe,SAAC8B,GACZ,EAAKxC,SAAS,CAAEqC,WAAW,GAAD,mBAAM,EAAK3C,MAAM2C,YAAjB,CAA6BG,O,EAE3DX,SAAW,SAACQ,GAER,IAAMI,EAAU,YAAO,EAAK/C,MAAM2C,YAClC,GAAkB,MAAdI,EACA,IAAK,IAAIxC,EAAI,EAAGC,EAAIuC,EAAWtC,OAAQF,EAAIC,EAAGD,IACN,MAAhCwC,EAAWxC,GAAGpB,iBACd4D,EAAWxC,GAAGpB,eAAiB4D,EAAWxC,GAAGpB,eAAeN,KAAI,SAACO,GAAD,OAAYA,EAAMS,UAEnD,MAA/BkD,EAAWxC,GAAGjB,gBACdyD,EAAWxC,GAAGjB,cAAgByD,EAAWxC,GAAGjB,cAAcT,KAAI,SAACO,GAAD,OAAYA,EAAMS,UAEvD,MAAzBkD,EAAWxC,GAAGhB,UACdwD,EAAWxC,GAAGhB,QAAUwD,EAAWxC,GAAGhB,QAAQV,KAAI,SAACO,GAAD,OAAYA,EAAMS,UAKhF,EAAKS,SAAS,CACVsC,WAAW,EACXI,KAAM,CACFZ,MAAOO,EAAWP,MAClBC,SAAUM,EAAWN,SACrBY,KAAM,GACNC,MAAOH,M,4DA/Bf5B,KAAKb,SAAS,CACVsC,WAAYzB,KAAKnB,MAAM4C,c,+BAoCrB,IACED,EAAexB,KAAKnB,MAApB2C,WAER,OACI,sBAAKd,UAAU,YAAf,UACI,cAAC,EAAD,CAAMM,SAAUhB,KAAKgB,WACpBhB,KAAKnB,MAAM4C,UACR,cAAC,EAAD,CACIL,KAAMpB,KAAKnB,MAAMgD,KACjBR,WAAYrB,KAAKgC,YAAYC,KAAKjC,QAEpC,KAEN,cAAC,EAAD,CAAOvC,cAAe+D,EAAYhD,gBAAiBwB,KAAKxB,kBACxD,cAAC,EAAD,CAAYqB,aAAcG,KAAKH,sB,GAnE7BgB,aCclBqB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.74d73724.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Variety</th>\r\n                <th>Seeding Outdoor</th>\r\n                <th>Seeding Indoor</th>\r\n                <th>Harvest</th>\r\n                <th>Exposition</th>\r\n                <th>Time to Harvest</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nconst Table = (props) => {\r\n    const { characterData, removeCharacter } = props\r\n\r\n    return (\r\n        <table>\r\n            <TableHeader />\r\n            <TableBody characterData={characterData} removeCharacter={removeCharacter} />\r\n        </table>       \r\n    )\r\n}\r\n\r\nconst TableBody = (props) => {\r\n    const rows = props.characterData.map((row, index) => {\r\n\r\n        return (\r\n            <tr key={index}>\r\n                <td>{row.variety}</td>\r\n                <td>{JSON.stringify(row.seedingOutdoor.map((month) => (month.label)))}</td>\r\n                <td>{JSON.stringify(row.seedingIndoor.map((month) => (month.label)))}</td>\r\n                <td>{JSON.stringify(row.harvest.map((month) => (month.label)))}</td>\r\n                <td>{row.exposition}</td>\r\n                <td>{row.timeToHarvest}</td>\r\n                <td>\r\n                    <button onClick={() => props.removeCharacter(index)}>Delete</button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    })\r\n    return <tbody>{rows}</tbody>\r\n        \r\n\r\n}\r\n\r\n\r\nexport default Table","import React, { Component } from 'react'\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Select from 'react-select';\r\n\r\nconst month = [\r\n    { label: 'January', value: '1' },\r\n    { label: 'February', value: '2' },\r\n    { label: 'March', value: '3' },\r\n    { label: 'April', value: '4' },\r\n    { label: 'May', value: '5' },\r\n    { label: 'June', value: '6' },\r\n    { label: 'July', value: '7' },\r\n    { label: 'August', value: '8' },\r\n    { label: 'September', value: '9' },\r\n    { label: 'October', value: '10' },\r\n    { label: 'November', value: '11' },\r\n    { label: 'December', value: '12' },\r\n];\r\n\r\nclass Formulaire extends Component {\r\n\r\n    initialState = {\r\n        variety: '',\r\n        seedingOutdoor: '',\r\n        seedingIndoor: '',\r\n        harvest: '',\r\n        exposition: '',\r\n        timeToHarvest: '',\r\n    }\r\n\r\n    state = this.initialState\r\n  \r\n    handleMonthChange = (opt, meta) => {\r\n\r\n        const  name  = meta.name\r\n        var options = opt;    \r\n        var value = [];\r\n        if (options == null) {\r\n            this.setState({\r\n                [name]: \"\"\r\n            })\r\n        }\r\n        else {\r\n             for (var i = 0, l = options.length; i < l; i++) {\r\n                value.push(options[i].value);\r\n             }\r\n        }\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n\r\n    }\r\n\r\n    handleMonthChange = (selectedOptions,meta) => {\r\n        const name = meta.name\r\n        this.setState({\r\n            [name]: selectedOptions\r\n        })\r\n        }\r\n\r\n\r\n        handleChange = (event) => {\r\n            const {name, value} = event.target\r\n            this.setState({\r\n                [name]: value\r\n            })\r\n    }\r\n    \r\n    addForm = () => {\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n        console.log(this.state.seedingIndoor)\r\n    }\r\n\r\n    render() {\r\n        const {variety, seedingOutdoor, seedingIndoor, harvest, exposition, timeToHarvest} = this.state;\r\n\r\n        return (\r\n             <>\r\n                <Form>   \r\n                    <Form.Group>\r\n                        <Form.Label>Variety</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            name=\"variety\"\r\n                            id=\"variety\"\r\n                            value={variety}\r\n                            onChange={this.handleChange} placeholder=\"Enter plant variety\" />\r\n                        <Form.Text className=\"text-muted\">Please type plant variety</Form.Text>\r\n                    </Form.Group>                   \r\n                    <Form.Label>Seeding Outdoor *</Form.Label>\r\n                    <Select\r\n                        name=\"seedingOutdoor\"\r\n                        id=\"seedingOutdoor\"\r\n                        options={month}\r\n                        value={seedingOutdoor}\r\n                        isMulti\r\n                        onChange={this.handleMonthChange}\r\n                    />                    \r\n                    <Form.Label>Seeding Indoor *</Form.Label>\r\n                    <Select\r\n                        name=\"seedingIndoor\"\r\n                        id=\"seedingIndoor\"\r\n                        options={month}\r\n                        value={seedingIndoor}\r\n                        isMulti\r\n                        onChange={this.handleMonthChange}\r\n                    />\r\n                    <Form.Label>Harvest *</Form.Label>\r\n                    <Select\r\n                        name=\"harvest\"\r\n                        id=\"harvest\"\r\n                        options={month}\r\n                        value={harvest}\r\n                        isMulti\r\n                        onChange={this.handleMonthChange}\r\n                    />                    \r\n                    <Form.Group>\r\n                        <Form.Label>Exposition</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"exposition\" id=\"exposition\" value={exposition} onChange={this.handleChange} >\r\n                            <option value=\"sunny\">Sunny</option>\r\n                            <option value=\"half-shadow\">Half Shadow</option>\r\n                            <option value=\"shadow\">Shadow</option>\r\n                        </Form.Control>\r\n                        <Form.Text className=\"text-muted\">Please choose what exposition the plant needs</Form.Text>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Time to harvest</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            name=\"timeToHarvest\"\r\n                            id=\"timeToHarvest\"\r\n                            value={timeToHarvest}\r\n                            onChange={this.handleChange} placeholder=\"Enter days before harvest\" />\r\n                        <Form.Text className=\"text-muted\">Please type the time in days after seeding to harvest the first vegetable</Form.Text>\r\n                    </Form.Group>\r\n                    <input type=\"button\" value=\"Add\" onClick={this.addForm} />\r\n                </Form>               \r\n             </>  \r\n        );\r\n    }\r\n}\r\nexport default Formulaire;","import React, { Component } from 'react'\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\n\r\n\r\nclass User extends Component {\r\n\r\n        handleChange = (event) => {\r\n            const {name, value} = event.target\r\n\r\n            this.setState({\r\n                [name]: value\r\n            })\r\n    }\r\n        //fetch('https://chefphan.com/green-hand-api/', {\r\n        //    method: 'POST',\r\n        //\r\n        //    body: JSON.stringify({ title: 'React POST Request Example' }), \r\n\r\n         //   headers: { 'Content-Type': 'application/json' }\r\n        //})\r\n\r\n        //    .then(res => res.json())\r\n\r\n         //   .catch(error => console.error('Error:', error))\r\n\r\n         //   .then(response => console.log('Success:', response));\r\n    \r\n    submitForm = () => {\r\n\r\n        this.props.sendInfo(this.state)\r\n\r\n    }\r\n    render() {\r\n        const { email , username} = '';\r\n\r\n        return (\r\n             <>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            name=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={this.handleChange} placeholder=\"Enter email\" />\r\n                        <Form.Text className=\"text-muted\">Please type email</Form.Text>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            name=\"username\"\r\n                            id=\"username\"\r\n                            value={username}\r\n                            onChange={this.handleChange} placeholder=\"Enter username\" />\r\n                        <Form.Text className=\"text-muted\">Please type username</Form.Text>\r\n                    </Form.Group>\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n                </Form>\r\n                \r\n             </>  \r\n\r\n        );\r\n    }\r\n}\r\nexport default User;","import React from 'react';\r\n\r\n\r\nclass Popup extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='popup'>\r\n                <div className='popup\\_inner'>\r\n                    \r\n                    <pre id=\"json\">{JSON.stringify(this.props.text)}</pre>\r\n                    <button onClick={this.props.closePopup}>close me</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Popup;","import React, { Component } from 'react'\r\nimport Table from './Table'\r\nimport Formulaire from './Formulaire'\r\nimport User from './User'\r\nimport Popup from './Popup'\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        characters: [],\r\n        showPopup: false , \r\n    }\r\n    removeCharacter = (index) => {\r\n        const { characters } = this.state\r\n\r\n        this.setState({\r\n            characters: characters.filter((character, i) => {\r\n                return i !== index\r\n            }),\r\n        })\r\n    }\r\n    \r\n    togglePopup() {\r\n        this.setState({\r\n            showPopup: !this.state.showPopup\r\n        });\r\n    }  \r\n\r\n    handleSubmit = (character) => {\r\n        this.setState({ characters: [...this.state.characters, character] })\r\n    }\r\n    sendInfo = (characters) => {\r\n\r\n        const seedsValue = [...this.state.characters]\r\n        if (seedsValue != null) {\r\n            for (var i = 0, l = seedsValue.length; i < l; i++) {\r\n                if (seedsValue[i].seedingOutdoor != null) {\r\n                    seedsValue[i].seedingOutdoor = seedsValue[i].seedingOutdoor.map((month) => (month.value))\r\n                }\r\n                if (seedsValue[i].seedingIndoor != null) {\r\n                    seedsValue[i].seedingIndoor = seedsValue[i].seedingIndoor.map((month) => (month.value))\r\n                }\r\n                if (seedsValue[i].harvest != null) {\r\n                    seedsValue[i].harvest = seedsValue[i].harvest.map((month) => (month.value))\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            showPopup: true,\r\n            back: {\r\n                email: characters.email,\r\n                username: characters.username,\r\n                info: \"\",\r\n                seeds: seedsValue\r\n            }\r\n\r\n        })\r\n          \r\n    }\r\n    render() {\r\n        const { characters } = this.state\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <User sendInfo={this.sendInfo} />\r\n                {this.state.showPopup ?\r\n                    <Popup\r\n                        text={this.state.back}\r\n                        closePopup={this.togglePopup.bind(this)}\r\n                    />  \r\n                    : null\r\n                     } \r\n                <Table characterData={characters} removeCharacter={this.removeCharacter} />\r\n                <Formulaire handleSubmit={this.handleSubmit} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n//import App from './Api';\r\n//import App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\n//ReactDOM.render(\r\n//  <React.StrictMode>\r\n//    <App />\r\n//  </React.StrictMode>,\r\n//  document.getElementById('root')\r\n//);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}