{"version":3,"sources":["Table.js","Formulaire.js","User.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","variety","val","seedingOutdoor","JSON","stringify","month","label","seedingIndoor","harvest","exposition","timeToHarvest","onClick","removeCharacter","Table","value","Formulaire","initialState","state","handleMonthChange","opt","meta","name","options","setState","i","l","length","push","selectedOptions","handleChange","event","target","addForm","handleSubmit","this","Form","Group","Label","Control","type","id","onChange","placeholder","Text","className","isMulti","as","Component","User","email","submitForm","sendInfo","App","characters","showPopup","filter","character","seedsValue","console","log","info","seeds","fetch","method","body","headers","then","res","json","catch","error","response","open","togglePopup","bind","position","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcb4bf5f.chunk.js","sourcesContent":["import React from 'react'\r\n/*\r\n * Table definition\r\n * Table formating\r\n * table line removal setup\r\n */\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Variety</th>\r\n                <th>Seeding Outdoor</th>\r\n                <th>Seeding Indoor</th>\r\n                <th>Harvest</th>\r\n                <th>Exposition</th>\r\n                <th>Time to Harvest</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nconst Table = (props) => {\r\n    const { characterData, removeCharacter } = props\r\n\r\n    return (\r\n        <table>\r\n            <TableHeader />\r\n            <TableBody characterData={characterData} removeCharacter={removeCharacter} />\r\n        </table>       \r\n    )\r\n}\r\n\r\nconst TableBody = (props) => {\r\n\r\n    const rows = props.characterData.map((row, index) => {\r\n        return (\r\n            <tr key={index}>\r\n                <td>{row.variety}</td>\r\n                <td>{(() => {\r\n                    var val = ''\r\n                    if (row.seedingOutdoor[0] !== '') {\r\n                        val = JSON.stringify(row.seedingOutdoor.map((month) => (month.label)))\r\n                    }\r\n                    return val\r\n                })()}</td>\r\n                <td>{(() => {\r\n                    var val = ''\r\n                    if (row.seedingIndoor[0] !== '') {\r\n                        val = JSON.stringify(row.seedingIndoor.map((month) => (month.label)))\r\n                    }\r\n                    return val\r\n                })()}</td>\r\n                <td>{(() => {\r\n                    var val = ''\r\n                    if (row.harvest[0] !== '') {\r\n                        val = JSON.stringify(row.harvest.map((month) => (month.label)))\r\n                    }\r\n                    return val\r\n                })()}</td>\r\n                <td>{row.exposition}</td>\r\n                <td>{row.timeToHarvest}</td>\r\n                <td>\r\n                    <button onClick={() => props.removeCharacter(index)}>Delete</button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    })\r\n    return <tbody>{rows}</tbody>\r\n        \r\n\r\n}\r\n\r\n\r\nexport default Table","import React, { Component } from 'react'\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Select from 'react-select';\r\n/*\r\n * Formular definition\r\n * the add buttun add a line in the Table\r\n */\r\n\r\nconst month = [\r\n    { label: 'January', value: '1' },\r\n    { label: 'February', value: '2' },\r\n    { label: 'March', value: '3' },\r\n    { label: 'April', value: '4' },\r\n    { label: 'May', value: '5' },\r\n    { label: 'June', value: '6' },\r\n    { label: 'July', value: '7' },\r\n    { label: 'August', value: '8' },\r\n    { label: 'September', value: '9' },\r\n    { label: 'October', value: '10' },\r\n    { label: 'November', value: '11' },\r\n    { label: 'December', value: '12' },\r\n];\r\n\r\nclass Formulaire extends Component {\r\n\r\n    initialState = {\r\n        variety: '',\r\n        seedingOutdoor: [\"\"],\r\n        seedingIndoor: [\"\"],\r\n        harvest: [\"\"],\r\n        exposition: '',\r\n        timeToHarvest: '',\r\n    }\r\n\r\n    state = this.initialState\r\n  \r\n    handleMonthChange = (opt, meta) => {\r\n\r\n        const  name  = meta.name\r\n        var options = opt;    \r\n        var value = [];\r\n        if (options == null) {\r\n            this.setState({\r\n                [name]: \"\"\r\n            })\r\n        }\r\n        else {\r\n             for (var i = 0, l = options.length; i < l; i++) {\r\n                value.push(options[i].value);\r\n             }\r\n        }\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n\r\n    }\r\n\r\n    handleMonthChange = (selectedOptions,meta) => {\r\n        const name = meta.name\r\n        this.setState({\r\n            [name]: selectedOptions\r\n        })\r\n    }\r\n\r\n\r\n    handleChange = (event) => {\r\n         const {name, value} = event.target\r\n         this.setState({\r\n            [name]: value\r\n         })\r\n    }\r\n    \r\n    addForm = () => {\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const {variety, seedingOutdoor, seedingIndoor, harvest, exposition, timeToHarvest} = this.state;\r\n\r\n        return (\r\n             <>\r\n                <Form>   \r\n                    <Form.Group>\r\n                        <Form.Label>Variety</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            name=\"variety\"\r\n                            id=\"variety\"\r\n                            value={variety}\r\n                            onChange={this.handleChange} placeholder=\"Enter plant variety\" />\r\n                        <Form.Text className=\"text-muted\">Please type plant variety</Form.Text>\r\n                    </Form.Group>                   \r\n                    <Form.Label>Seeding Outdoor</Form.Label>\r\n                    <Select\r\n                        name=\"seedingOutdoor\"\r\n                        id=\"seedingOutdoor\"\r\n                        options={month}\r\n                        value={seedingOutdoor}\r\n                        isMulti\r\n                        onChange={this.handleMonthChange}\r\n                    />                    \r\n                    <Form.Label>Seeding Indoor</Form.Label>\r\n                    <Select\r\n                        name=\"seedingIndoor\"\r\n                        id=\"seedingIndoor\"\r\n                        options={month}\r\n                        value={seedingIndoor}\r\n                        isMulti\r\n                        onChange={this.handleMonthChange}\r\n                    />\r\n                    <Form.Label>Harvest</Form.Label>\r\n                    <Select\r\n                        name=\"harvest\"\r\n                        id=\"harvest\"\r\n                        options={month}\r\n                        value={harvest}\r\n                        isMulti\r\n                        onChange={this.handleMonthChange}\r\n                    />                    \r\n                    <Form.Group>\r\n                        <Form.Label>Exposition</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"exposition\" id=\"exposition\" value={exposition} onChange={this.handleChange} >\r\n                            <option value=\"sunny\">Sunny</option>\r\n                            <option value=\"half-shadow\">Half Shadow</option>\r\n                            <option value=\"shadow\">Shadow</option>\r\n                        </Form.Control>\r\n                        <Form.Text className=\"text-muted\">Please choose what exposition the plant needs</Form.Text>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Time to harvest</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            name=\"timeToHarvest\"\r\n                            id=\"timeToHarvest\"\r\n                            value={timeToHarvest}\r\n                            onChange={this.handleChange} placeholder=\"Enter days before harvest\" />\r\n                        <Form.Text className=\"text-muted\">Please type the time in days after seeding to harvest the first vegetable</Form.Text>\r\n                    </Form.Group>\r\n                    <input type=\"button\" value=\"Add\" onClick={this.addForm} />\r\n                </Form>               \r\n             </>  \r\n        );\r\n    }\r\n}\r\nexport default Formulaire;","import React, { Component } from 'react'\r\nimport Form from \"react-bootstrap/Form\";\r\n//import Popup from \"reactjs-popup\";\r\n\r\n\r\n/*\r\n * User definition\r\n * get the input user information inputs\r\n */\r\n\r\nclass User extends Component {\r\n    initialState = {\r\n        email: '',\r\n        name: '',\r\n    }\r\n\r\n    state = this.initialState\r\n\r\n        handleChange = (event) => {\r\n            const {name, value} = event.target\r\n\r\n            this.setState({\r\n                [name]: value\r\n            })\r\n    }\r\n        \r\n    submitForm = () => {\r\n\r\n        this.props.sendInfo(this.state)\r\n        this.setState(this.initialState)\r\n\r\n    }\r\n    render() {\r\n        const { email , name} = this.state;\r\n\r\n        return (\r\n             <>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            name=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={this.handleChange} placeholder=\"Enter email\" />\r\n                        <Form.Text className=\"text-muted\">Please type email</Form.Text>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                            name=\"name\"\r\n                            id=\"name\"\r\n                            value={name}\r\n                            onChange={this.handleChange} placeholder=\"Enter name\" />\r\n                        <Form.Text className=\"text-muted\">Please type name</Form.Text>\r\n                    </Form.Group>\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n                </Form>\r\n                \r\n             </>  \r\n\r\n        );\r\n    }\r\n}\r\nexport default User;","import React, { Component } from 'react'\r\nimport Table from './Table'\r\nimport Formulaire from './Formulaire'\r\nimport User from './User'\r\n//import Popup from './Popup'\r\nimport Popup from \"reactjs-popup\";\r\n//import 'reactjs-popup/dist/index.css';\r\n/*\r\n * App definition\r\n * Centralize the app\r\n */\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        characters: [],\r\n        showPopup: false , \r\n    }\r\n    removeCharacter = (index) => {\r\n        const { characters } = this.state\r\n\r\n        this.setState({\r\n            characters: characters.filter((character, i) => {\r\n                return i !== index\r\n            }),\r\n        })\r\n    }\r\n    \r\n    togglePopup() {\r\n        \r\n        this.setState({\r\n            characters: [],\r\n            showPopup: false, \r\n        });\r\n    }  \r\n\r\n    handleSubmit = (character) => {\r\n        this.setState({ characters: [...this.state.characters, character] })\r\n    }\r\n    sendInfo = (characters) => {\r\n\r\n        const seedsValue = [...this.state.characters]\r\n        if (seedsValue != null) {\r\n            for (var i = 0, l = seedsValue.length; i < l; i++) {\r\n                if (seedsValue[i].seedingOutdoor[0] !== '') {\r\n                    seedsValue[i].seedingOutdoor = seedsValue[i].seedingOutdoor.map((month) => (month.value))\r\n                }\r\n                if (seedsValue[i].seedingIndoor[0] !== '') {\r\n                    seedsValue[i].seedingIndoor = seedsValue[i].seedingIndoor.map((month) => (month.value))\r\n                }\r\n                if (seedsValue[i].harvest[0] !== '') {\r\n                    seedsValue[i].harvest = seedsValue[i].harvest.map((month) => (month.value))\r\n                }\r\n            }\r\n\r\n         }\r\n  \r\n\r\n        \r\n        console.log(JSON.stringify({\r\n            email: characters.email,\r\n            name: characters.name,\r\n            info: \"\",\r\n            seeds: seedsValue\r\n        }))\r\n        \r\n        \r\n\r\n        fetch('https://chefphan.com/gh-api/', {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    email: characters.email,\r\n                    name: characters.name,\r\n                    info: \"\",\r\n                    seeds: seedsValue\r\n                }),\r\n            headers: {\r\n                \"access-control-allow-origin\": \"*\",\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n                .then(res => res.json())\r\n                .catch(error => console.error('Error:', error))\r\n                .then(response => console.log('Success:', response));\r\n\r\n        this.setState({\r\n            showPopup: true,\r\n            characters: [],\r\n        })\r\n        \r\n\r\n    }\r\n    render() {\r\n        const { characters } = this.state\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <User sendInfo={this.sendInfo} />\r\n                <Popup open={this.state.showPopup}  >                   \r\n                    <text>Table Submited </text>  \r\n                    <button onClick={this.togglePopup.bind(this)} position=\"center\">OK</button>                \r\n                    \r\n                </Popup>                  \r\n                <Table characterData={characters} removeCharacter={this.removeCharacter} />\r\n                <Formulaire handleSubmit={this.handleSubmit} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n//import App from './Api';\r\n//import App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\n//ReactDOM.render(\r\n//  <React.StrictMode>\r\n//    <App />\r\n//  </React.StrictMode>,\r\n//  document.getElementById('root')\r\n//);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}